@startuml
/'!theme metal'/
Participant ClientPresentation #LightBlue
Participant CommandFactoryC #LightBlue
Participant BuyGameC #LightBlue
Participant NetworkStreamHandlerC #LightBlue
Participant NetworkStream #LightYellow
Participant NetworkStreamHandlerS #LightGreen
Participant ClientHandler #LightGreen
Participant CommandFactoryS #LightGreen
Participant BuyGameS #LightGreen
Participant BusinessLogicGameInfo #LightGreen
Participant BusinessLogicUtils #LightGreen
database DataAccess #LightGreen

ClientPresentation -> NetworkStreamHandlerC : new NetworkStreamHandler(tcpClient.GetStream()); : void
activate NetworkStreamHandlerC
activate ClientPresentation
activate ClientHandler
activate NetworkStream #Yellow
activate DataAccess


ClientHandler -> NetworkStreamHandlerS : ReadCommand() : Command 
NetworkStreamHandlerS -> NetworkStream : Read(CMD_LENGTH) : byte[]
note right
Esto se realiza cuando 
se crea la conexión con el cliente
end note

autonumber
ClientPresentation -> ClientPresentation : BuyGame(gameId) : void


ClientHandler -> NetworkStreamHandlerS : ReadHeader() : string
NetworkStreamHandlerS -> NetworkStream : Read(HEADER_LENGTH) : byte[]

ClientPresentation -> CommandFactoryC : GetCommandHandler(BUY_GAME, nwsh) : BuyGameC
activate CommandFactoryC
create BuyGameC
CommandFactoryC -> BuyGameC :  new BuyGame(nwsh)
return new BuyGameC()
deactivate CommandFactoryC

ClientPresentation -> BuyGameC : SendRequest() : GamePage
activate BuyGameC

BuyGameC -> NetworkStreamHandlerC : WriteString(REQUEST_HEADER)
NetworkStreamHandlerC -> NetworkStream : Write(REQUEST_HEADER: byte[])
NetworkStream --> NetworkStreamHandlerS : byte[HEADER_LENGTH]
NetworkStreamHandlerS --> ClientHandler : "REQ"


BuyGameC -> NetworkStreamHandlerC : WriteCommand(BUY_GAME)
NetworkStreamHandlerC -> NetworkStream : Write(data : byte[])
NetworkStream --> NetworkStreamHandlerS : byte[CMD_LENGTH]
NetworkStreamHandlerS --> ClientHandler : BUY_GAME

BuyGameC -> NetworkStreamHandlerC : WriteInt(dataLengthInBytes)
NetworkStreamHandlerC -> NetworkStream : Write(data : byte[])

BuyGameC -> NetworkStreamHandlerC : WriteString(data)
NetworkStreamHandlerC -> NetworkStream : Write(data : byte[])
note left
  El cliente manda la solicitud y 
  espera leyendo la respuesta
end note


BuyGameC -> NetworkStreamHandlerC : ReadInt(HEADER_LENGTH)
NetworkStreamHandlerC -> NetworkStream : Read(HEADER_LENGTH)

BuyGameC -> NetworkStreamHandlerC : ReadCommand()
NetworkStreamHandlerC -> NetworkStream : Read(CMD_LENGTH)

BuyGameC -> NetworkStreamHandlerC : ReadInt(DATA_SIZE_LENGTH)
NetworkStreamHandlerC -> NetworkStream : Read(DATA_SIZE_LENGTH)

BuyGameC -> NetworkStreamHandlerC : ReadString(dataLength)
NetworkStreamHandlerC -> NetworkStream : Read(dataLength)

/' server  '/

ClientHandler -> CommandFactoryS : GetCommandHandler(BUY_GAME, nwsh) : BuyGameC
activate CommandFactoryS
create BuyGameS
CommandFactoryS -> BuyGameS :  new BuyGame()
activate BuyGameS
return BuyGameS
ClientHandler -> BuyGameS : HandleRequest()
deactivate CommandFactoryS
activate BuyGameS

BuyGameS -> NetworkStreamHandlerS : ReadInt(DATA_SIZE_LENGTH)
NetworkStreamHandlerS -> NetworkStream : Read(DATA_SIZE_LENGTH) : byte[]
NetworkStream --> NetworkStreamHandlerS
NetworkStreamHandlerS --> BuyGameS

BuyGameS -> NetworkStreamHandlerS : ReadString(length)
NetworkStreamHandlerS -> NetworkStream : Read(length) : byte[]
NetworkStream -> NetworkStreamHandlerS
NetworkStreamHandlerS --> BuyGameS

/' singleton'/
BuyGameS -> BusinessLogicGameInfo : << static >> GetInstance() 
note right
  BusinessLogicGameInfo
  singleton
end note
activate BusinessLogicGameInfo
alt instance == null
  BusinessLogicGameInfo -> BusinessLogicGameInfo : new BusinessLogicGameInfo()
end
BusinessLogicGameInfo --> BuyGameS 
BuyGameS -> BusinessLogicGameInfo : BuyGame(gameId,nwsh)

/' singleton'/
BusinessLogicGameInfo -> BusinessLogicUtils : << static >> GetInstance() 
note right
  BusinessLogicUtils
  singleton
end note
activate BusinessLogicUtils
alt instance == null
  BusinessLogicUtils -> BusinessLogicUtils : new BusinessLogicGameInfo()
end
BusinessLogicUtils --> BusinessLogicGameInfo 
BusinessLogicGameInfo -> BusinessLogicUtils : GetGameById(gameId) : Game
BusinessLogicUtils -> DataAccess : Games.Find(game.Id == gameId) : Game
DataAccess --> BusinessLogicUtils
BusinessLogicUtils --> BusinessLogicGameInfo
note right
El dataAcces también cuenta con un singleton
Asi todas las businesss logic acceden al mismo
Se sacó del diagrama para no agrandarlo más
end note

BusinessLogicGameInfo -> BusinessLogicUtils : GetUser(nwsh) : User
BusinessLogicUtils -> DataAccess : users.Find(game.Id == username) : User
DataAccess --> BusinessLogicUtils
BusinessLogicUtils --> BusinessLogicGameInfo 



BusinessLogicGameInfo --> BuyGameS : success : bool

BuyGameS -> NetworkStreamHandlerS : WriteString(RESPONSE_HEADER)
NetworkStreamHandlerS -> NetworkStream : Write(encodedData)
NetworkStream --> NetworkStreamHandlerC 
NetworkStreamHandlerC --> BuyGameC 

BuyGameS -> NetworkStreamHandlerS : WriteCommand(BUY_GAME)
NetworkStreamHandlerS -> NetworkStream : Write(cmd)
NetworkStream --> NetworkStreamHandlerC 
NetworkStreamHandlerC --> BuyGameC 

BuyGameS -> NetworkStreamHandlerS : WriteInt(dataLengthInBytes)
NetworkStreamHandlerS -> NetworkStream : Write(number)
NetworkStream --> NetworkStreamHandlerC 
NetworkStreamHandlerC --> BuyGameC 

BuyGameS -> NetworkStreamHandlerS : WriteString(data)
NetworkStreamHandlerS -> NetworkStream : Write(encodedData)
NetworkStream --> NetworkStreamHandlerC 
NetworkStreamHandlerC --> BuyGameC 

BuyGameC --> ClientPresentation : message : string
ClientPresentation -> ClientPresentation : ShowGameInfo(gameId)
note right
Se imprime el mensaje en pantalla
end note
deactivate NetworkStream
@enduml